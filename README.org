#+title: GNU Emacs
#+description: This is my Emacs Configuration
* Table of Content
:PROPERTIES:
:TOC:      :include all
:END:
:CONTENTS:
- [[#table-of-content][Table of Content]]
- [[#general-configuration][General Configuration]]
  - [[#package-installation][Package Installation]]
    - [[#melpa-package][Melpa Package]]
    - [[#user-package][User Package]]
  - [[#straightel][Straight.el]]
  - [[#boot-up-optimization][Boot Up Optimization]]
    - [[#reducing-the-frequency-of-garbage-collection][Reducing the frequency of garbage collection]]
  - [[#turn-off-dialog-box][Turn off dialog box]]
  - [[#secrets][Secrets]]
- [[#user-interface-settings][User Interface Settings]]
  - [[#make-esc-quit-promps][Make ESC quit promps]]
  - [[#menu-bar][Menu Bar]]
  - [[#theme][Theme]]
  - [[#doom-modeline][Doom Modeline]]
    - [[#change-modified-face-to-error-color][change modified face to error color]]
  - [[#line-numbers-and-truncated-lines][Line Numbers and Truncated Lines]]
  - [[#truncate-lines][Truncate lines]]
  - [[#indentation][Indentation]]
    - [[#basic-setup][Basic setup]]
    - [[#language-specific-tweaks][Language-specific tweaks]]
    - [[#electric-indent][Electric indent]]
    - [[#agressive-indentation][Agressive indentation]]
      - [[#dont-indent-before-adding-][Dont indent before adding ;]]
    - [[#yank-automatic-indentation][Yank automatic indentation]]
  - [[#undo-tree][Undo Tree]]
  - [[#line-highlighting][Line Highlighting]]
  - [[#rainbow][Rainbow]]
  - [[#scrolling][Scrolling]]
  - [[#fonts][Fonts]]
  - [[#syntax-highlighting-for-config][Syntax Highlighting for config]]
  - [[#pretty-math-symbol][Pretty Math Symbol]]
  - [[#transparency][Transparency]]
  - [[#delete-trailing-white-space-when-saving][Delete trailing white space when saving]]
  - [[#hide-m-from-file-with-windows-newline-character][Hide ^M from file with windows newline character]]
  - [[#new-version-of-adapt-font][new version of adapt font]]
- [[#general-packages][General Packages]]
  - [[#keybinding-packages][keybinding packages]]
    - [[#key-chord][key-chord]]
    - [[#evil-mode][Evil Mode]]
    - [[#which-key][Which Key]]
    - [[#general][General]]
      - [[#set-space-and-c-spc-as-global-prefix][set space and C-SPC as global prefix]]
      - [[#no-leader-key-maps][No leader key maps]]
      - [[#dap-mode-key-maps][Dap Mode Key maps]]
  - [[#auto-completion-engines][Auto Completion Engines]]
    - [[#ivy][Ivy]]
    - [[#ivy-rich][Ivy Rich]]
    - [[#counsel][Counsel]]
    - [[#company][Company]]
    - [[#electric][Electric]]
      - [[#indentation][Indentation]]
      - [[#parenthesis][parenthesis]]
  - [[#dashboard][Dashboard]]
    - [[#configuration][Configuration]]
    - [[#dashboard-in-emacsclient][Dashboard in Emacsclient]]
  - [[#helm][Helm]]
  - [[#perspective][Perspective]]
  - [[#dired][Dired]]
    - [[#dired-group-file-and-folder-together][Dired group file and folder together]]
  - [[#flycheck][Flycheck]]
  - [[#rainbow-mode][Rainbow mode]]
  - [[#pdf][PDF]]
  - [[#projectile][Projectile]]
  - [[#all-the-icons][All The Icons]]
  - [[#emacs-everywhere][Emacs Everywhere]]
  - [[#sudo-edit][Sudo Edit]]
  - [[#anzu][Anzu]]
  - [[#diff-highlight-git][Diff Highlight (git)]]
  - [[#org-mode][Org Mode]]
    - [[#configuration][Configuration]]
    - [[#org-bullets][Org Bullets]]
    - [[#org-todo-keywords][Org Todo keywords]]
    - [[#org-todo-toggle][Org Todo toggle]]
    - [[#org-calenda][Org calenda]]
    - [[#generate-table-of-contents][Generate Table of Contents]]
    - [[#keybindings][keybindings]]
    - [[#latex-preview][Latex Preview]]
    - [[#inline-image][Inline image]]
    - [[#evil-mode][Evil Mode]]
    - [[#org-make-toc][Org Make TOC]]
  - [[#yasnippet][Yasnippet]]
    - [[#indent][Indent]]
  - [[#latex][Latex]]
  - [[#emojis][Emojis]]
  - [[#atomic-chrome][Atomic Chrome]]
  - [[#quickrun][Quickrun]]
  - [[#workspace][Workspace]]
    - [[#requirements][requirements]]
    - [[#keymap][Keymap]]
  - [[#language-support][Language Support]]
    - [[#programming-languages][Programming Languages]]
    - [[#html][html]]
  - [[#lsp-mode][LSP mode]]
    - [[#initialize-lsp-package][Initialize lsp package]]
    - [[#setup-lsp-with-other-package][Setup lsp with other package]]
    - [[#lsp-features][LSP features]]
    - [[#language-support][Language support]]
      - [[#java][Java]]
      - [[#cc][C/C++]]
      - [[#python][Python]]
      - [[#jsxjavascripttypescript][JSX/Javascript/Typescript]]
      - [[#latex][Latex]]
      - [[#tailwindcss][Tailwindcss]]
      - [[#rust][Rust]]
  - [[#dap-mode][DAP mode]]
    - [[#installation][Installation]]
    - [[#hooks][hooks]]
    - [[#languages][Languages]]
  - [[#tramp-mode][Tramp mode]]
    - [[#set-default-connection-method][Set default connection method]]
    - [[#shell-prompt-fix][Shell prompt fix]]
    - [[#set][Set]]
  - [[#docker-mode][Docker mode]]
    - [[#fix-indentation][Fix Indentation]]
  - [[#files][Files]]
    - [[#keybindings][Keybindings]]
    - [[#file-shortcut][File Shortcut]]
  - [[#python-notebook][Python Notebook]]
  - [[#highlight-indent][Highlight Indent]]
  - [[#indent-bar][Indent bar]]
  - [[#dumb-jump][Dumb Jump]]
  - [[#git-dired-modeline][Git Dired Modeline]]
  - [[#write-room-mode][Write room mode]]
  - [[#magit][Magit]]
  - [[#math-preview][Math Preview]]
  - [[#copilot][copilot]]
  - [[#evil-easymotion][Evil easymotion]]
  - [[#treesit][Treesit]]
  - [[#treesitter][Treesitter]]
  - [[#markdown-drag-and-drop][Markdown drag and drop]]
  - [[#counsel-rg-here][Counsel rg-here]]
- [[#configuration][Configuration]]
  - [[#remove-file-lock][remove file lock]]
  - [[#evil-shift-keep-selection][Evil Shift keep selection]]
  - [[#instantly-update-file-as-it-changes][instantly update file as it changes]]
  - [[#keep-folders-clean][Keep folders clean]]
    - [[#backup-files][Backup files]]
    - [[#auto-save-files][Auto Save files]]
    - [[#no-littering][No littering]]
  - [[#windows-control][Windows control]]
    - [[#split-buffer-side-by-side][Split buffer side by side]]
    - [[#keybindings][Keybindings]]
  - [[#registers][Registers]]
  - [[#text-scaling][text scaling]]
  - [[#cursor][Cursor]]
  - [[#general-keybindings][general Keybindings]]
  - [[#copy-directory-to-keyring][Copy directory to keyring]]
- [[#runtime-optimization][Runtime Optimization]]
  - [[#lower-gc-threshold-gc-happens-more-frquqently-in-less-time][lower GC Threshold gc happens more frquqently in less time]]
- [[#silence-warning-due-to-emacs-2905][Silence warning due to emacs 29.0.5]]
:END:

* General Configuration
** Package Installation
*** Melpa Package
#+begin_src emacs-lisp (require 'package)
(defvar native-comp-deferred-compilation-deny-list nil)
(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(package-initialize)
#+end_src

*** User Package

#+begin_src emacs-lisp
(unless (package-installed-p 'use-package) (package-install 'use-package))
#+end_src

** Straight.el

#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
(setq straight-use-package-by-default t)
#+end_src

** Boot Up Optimization
*** Reducing the frequency of garbage collection

#+begin_src emacs-lisp
;; Using garbage magic hack.
(use-package gcmh
    :config
    (gcmh-mode 1))
;; Setting garbage collection threshold
(setq gc-cons-threshold 402653184
    gc-cons-percentage 0.6)

;; Profile emacs startup
(add-hook 'emacs-startup-hook
	(lambda ()
	    (message "*** Emacs loaded in %s with %d garbage collections."
		    (format "%.2f seconds"
			    (float-time
			    (time-subtract after-init-time before-init-time)))
		    gcs-done)))

  ;; Silence compiler warnings as they can be pretty disruptive (setq comp-async-report-warnings-errors nil)
#+end_src

** Turn off dialog box

#+begin_src emacs-lisp
(setq use-dialog-box nil)
#+end_src

** Secrets

#+begin_src emacs-lisp
(load-file
 (expand-file-name
  "secrets/secrets.el"
  user-emacs-directory))
#+end_src

#+RESULTS:
: t

* User Interface Settings
** Make ESC quit promps

#+begin_src emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

** Menu Bar

#+begin_src emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+end_src

** Theme

#+begin_src emacs-lisp
(use-package doom-themes)
(setq doom-themes-enable-bold t
    doom-themes-enable-italics t)
(load-theme 'doom-outrun-electric t)
#+end_src

#+RESULTS:
: t

** Doom Modeline

#+begin_src emacs-lisp
(use-package doom-modeline)
(doom-modeline-mode 1)
(setq find-file-visit-truename t)
(setq doom-modeline-buffer-modification-icon t)
(setq doom-modeline-major-mode-color-icon t)
(setq doom-modeline-project-detection 'auto)
(setq inhibit-compacting-font-caches t)
(setq doom-modeline-bar-width 4)
#+end_src

*** change modified face to error color

#+begin_src emacs-lisp
(defface modified-buffer
  '((t (:inherit (error bold) :background unspecified)))
  "Face used for the \\='unsaved\\=' symbol in the mode-line."
  :group 'doom-modeline-faces)

(custom-set-faces
 '(doom-modeline-buffer-modified ((t :inherit modified-buffer))))
#+end_src


#+RESULTS:
: ffip
** Line Numbers and Truncated Lines
show absolute line numbers and highlight current line number
#+begin_src emacs-lisp
(global-display-line-numbers-mode)
;; (setq display-line-numbers-type 'relative)
#+end_src

#+RESULTS:
: t

disable line numbers for some modes
#+begin_src emacs-lisp
(dolist (mode '(term-mode-hook
cfw:calendar-mode-hook
org-mode-hook
eshell-mode-hook))
(add-hook mode (lambda() (display-line-numbers-mode 0))))
#+end_src

** Truncate lines
remove emacs' default line wrap
#+begin_src emacs-lisp
(set-default 'truncate-lines t)
#+end_src

** Indentation
[[https://dougie.io/emacs/indentation/][Guide]]
*** Basic setup

#+begin_src emacs-lisp
;; Create a variable for our preferred tab width
(setq custom-tab-width 4)

;; Two callable functions for enabling/disabling tabs in Emacs
(defun disable-tabs () (setq indent-tabs-mode nil))
(defun enable-tabs  ()
  (local-set-key (kbd "TAB") 'tab-to-tab-stop)
  (setq indent-tabs-mode t)
  (setq tab-width custom-tab-width))

;; Hooks to Enable Tabs
(add-hook 'prog-mode-hook 'enable-tabs)
(add-hook 'lisp-mode-hook 'enable-tabs)
(add-hook 'emacs-lisp-mode-hook 'enable-tabs)
;; Hooks to Disable Tabs
(add-hook 'python-mode-hook 'disable-tabs)

;; Making electric-indent behave sanely
(setq-default electric-indent-inhibit t)

;; Make the backspace properly erase the tab instead of
;; removing 1 space at a time.
(setq backward-delete-char-untabify-method 'hungry)

;; (OPTIONAL) Shift width for evil-mode users
;; For the vim-like motions of ">>" and "<<".
(setq-default evil-shift-width custom-tab-width)

;; WARNING: This will change your life
;; (OPTIONAL) Visualize tabs as a pipe character - "|"
;; This will also show trailing characters as they are useful to spot.
(setq whitespace-style '(face tabs tab-mark trailing))
(custom-set-faces
 '(whitespace-tab ((t (:foreground "#636363")))))
(setq whitespace-display-mappings
  ;; '((tab-mark 9 [124 9] [92 9]))) ; 124 is the ascii ID for '\|'
  '((tab-mark 9 [9] [92 9]))) ; 124 is the ascii ID for '\|'
;; (global-whitespace-mode) ; Enable whitespace mode everywhere
; END TABS CONFIG
#+end_src

*** Language-specific tweaks

#+begin_src emacs-lisp
;; Language-Specific Tweaks
(setq-default python-indent-offset custom-tab-width) ;; Python
(setq-default python-indent-guess-indent-offset nil) ;; Python
(setq-default js-indent-level custom-tab-width)      ;; Javascript
(setq-default c-basic-offset 4)                      ;; C/C++/Java
(setq LaTeX-item-indent 0)                           ;; LaTeX
(setq LaTeX-indent-level 4)                          ;; LaTeX
(add-hook 'html-mode-hook                            ;; html
    (lambda ()
    ;; Default indentation is usually 2 spaces, changing to 4.
        (set (make-local-variable 'sgml-basic-offset) 4)))
(add-hook 'sgml-mode-hook                            ;; html
    (lambda ()
        ;; Default indentation to 2, but let SGML mode guess, too.
        (set (make-local-variable 'sgml-basic-offset) 2)
        (sgml-guess-indent)))

#+end_src

#+RESULTS:
| lambda | nil | (set (make-local-variable 'sgml-basic-offset) 2) | (sgml-guess-indent) |

*** Electric indent

#+begin_src emacs-lisp
(electric-indent-mode +1)
#+end_src

*** Agressive indentation

#+begin_src emacs-lisp
;; (use-package aggressive-indent)
;; (global-aggressive-indent-mode)
#+end_src

**** Dont indent before adding ;

#+begin_src emacs-lisp
;; (add-to-list
;;  'aggressive-indent-dont-indent-if
;;  '(and (derived-mode-p 'c++-mode)
;;        (null (string-match "\\([;{}]\\|\\b\\(if\\|for\\|while\\)\\b\\)"
;;                            (thing-at-point 'line)))))
#+end_src

*** Yank automatic indentation

#+begin_src emacs-lisp
(dolist (command '(yank yank-pop))
   (eval `(defadvice ,command (after indent-region activate)
            (and (not current-prefix-arg)
                 (member major-mode '(emacs-lisp-mode lisp-mode
                                                      clojure-mode    scheme-mode
                                                      haskell-mode    ruby-mode
                                                      rspec-mode      python-mode
                                                      c-mode          c++-mode
                                                      objc-mode       latex-mode
                                                      plain-tex-mode))
                 (let ((mark-even-if-inactive transient-mark-mode))
                   (indent-region (region-beginning) (region-end) nil))))))

#+end_src

** Undo Tree

#+begin_src emacs-lisp
(use-package undo-fu)
(use-package undo-fu-session)
(setq evil-undo-system 'undo-fu)
#+end_src

** Line Highlighting
remove emacs' default line wrap
#+begin_src emacs-lisp
(global-hl-line-mode +1)
(use-package hlinum)
(hlinum-activate)
#+end_src

** Rainbow
Delimiter
color (),[],{} as pair
#+begin_src emacs-lisp
(use-package rainbow-delimiters
:hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Scrolling

#+begin_src emacs-lisp
(setq scroll-step 1)
(setq scroll-conservatively 10000)
#+end_src

** Fonts

#+begin_src emacs-lisp
(set-face-attribute 'default nil
    :font "JetBrains  Mono Medium")
(set-face-attribute 'variable-pitch nil
	:font "JetBrains Mono Medium")
(set-face-attribute 'fixed-pitch nil
    :font "JetBrains Mono Medium")

(setq-default line-spacing 0.10)
(add-to-list 'default-frame-alist '(font . "JetBrains Mono Medium"))
;; (add-to-list 'default-frame-alist '(line-spacing . 0.2))
#+end_src

#+RESULTS:
: ((font . JetBrains Mono SemiBold 13) (font . JetBrains Mono 13) (vertical-scroll-bars))

** Syntax Highlighting for config

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.*rc$" . conf-unix-mode))
#+end_src

** Pretty Math Symbol

#+begin_src emacs-lisp
;; (setq org-pretty-entities t)
#+end_src

** Transparency

#+begin_src emacs-lisp
(set-frame-parameter nil 'alpha-background 70) ; For current frame
(add-to-list 'default-frame-alist '(alpha-background . 70)) ; For all new frames henceforth
#+end_src

#+RESULTS:
: ((alpha-background . 100) (alpha-background . 80) (font . JetBrains Mono Medium) (vertical-scroll-bars))

** Delete trailing white space when saving

#+begin_src emacs-lisp
(use-package ws-butler)
(add-hook 'prog-mode-hook #'ws-butler-mode)
#+end_src

** Hide ^M from file with windows newline character

#+begin_src emacs-lisp
(defun remove-dos-eol ()
  "Do not show ^M in files containing mixed UNIX and DOS line endings."
  (interactive)
  (setq buffer-display-table (make-display-table))
  (aset buffer-display-table ?\^M []))
(add-hook 'text-mode-hook 'remove-dos-eol)
#+end_src

** new version of adapt font

#+begin_src emacs-lisp
(defun td/adapt-font-size (&optional frame)
  (let* ((frame (selected-frame))
         (attrs (frame-monitor-attributes frame))
         (size (alist-get 'mm-size attrs))
         (geometry (alist-get 'geometry attrs))
         (ppi (/ (caddr geometry) (/ (car size) 25.4))))
    (if (> ppi 120)
        (set-face-attribute 'default frame :height 180)
      (set-face-attribute 'default frame :height 130))))

(add-function :after after-focus-change-function #'td/adapt-font-size)
(add-hook 'after-make-frame-functions #'td/adapt-font-size)
;; (add-hook 'window-setup-hook #'td/adapt-font-size)
(add-hook 'focus-in-hook #'td/adapt-font-size)
#+end_src

* General Packages
** keybinding packages
*** key-chord
#+begin_src emacs-lisp
(use-package key-chord)
#+end_src

*** Evil Mode
  #+begin_src emacs-lisp
    (use-package evil
        :init
        (setq evil-want-integration t)
        (setq evil-want-keybinding nil)
        (setq evil-vsplit-window-right t)
        (setq evil-split-window-below t)
        (setq evil-respect-visual-line-mode t)
        (setq-default evil-cross-lines t)
        (evil-mode))
    (use-package evil-collection
        :after evil
        :config
        (evil-collection-init))
    (with-eval-after-load 'evil-maps
    (define-key evil-motion-state-map (kbd "RET") nil))
    
    (define-key evil-normal-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
    (define-key evil-normal-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
    (define-key evil-motion-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
    (define-key evil-motion-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)

    (use-package evil-numbers)
    (define-key evil-normal-state-map (kbd "C-c +") 'evil-numbers/inc-at-pt)
    (define-key evil-normal-state-map (kbd "C-c -") 'evil-numbers/dec-at-pt)
  #+end_src

  #+RESULTS:

add keybindings to go back to normal state
#+begin_src emacs-lisp
(setq key-chord-two-keys-delay 0.3)
(key-chord-define evil-insert-state-map "jj" 'evil-normal-state)
(key-chord-mode 1)
#+end_src

*** Which Key
display key functions
  #+begin_src emacs-lisp
(use-package which-key)
(which-key-mode)
  #+end_src

*** General

#+begin_src emacs-lisp
(use-package general
     :config
(general-evil-setup t))
#+end_src

**** set space and C-SPC as global prefix

#+begin_src emacs-lisp
(general-create-definer space-leader
    :states '(normal visual emacs)
    :keymaps 'override
    :prefix "SPC"
    :global-prefix "SPC"
)

#+end_src

#+RESULTS:
: space-leader

**** No leader key maps
#+begin_src emacs-lisp
(general-create-definer no-leader
    :states '(normal visual emacs)
    :keymaps 'override
    :prefix ""
)


(general-create-definer no-leader-global
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix ""
)

#+end_src

**** Dap Mode Key maps

#+begin_src emacs-lisp
(general-create-definer dap-leader
    :states '(normal visual emacs)
    :keymaps 'override
    :prefix "C-c d"
)
#+end_src
** Auto Completion Engines
*** Ivy

#+begin_src emacs-lisp
(use-package ivy
    :diminish
    :bind (("C-s" . swiper)
            :map ivy-minibuffer-map
            ("TAB" . ivy-alt-done)
            ("C-l" . ivy-alt-done)
            ("C-j" . ivy-next-line)
            ("C-k" . ivy-previous-line)
            :map ivy-switch-buffer-map
            ("C-k" . ivy-previous-line)
            ("C-l" . ivy-done)
            ("C-d" . ivy-switch-buffer-kill)
            :map ivy-reverse-i-search-map
            ("C-k" . ivy-previous-line)
            ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))
#+end_src

*** Ivy Rich

#+begin_src emacs-lisp
(use-package ivy-rich
    :init
    (ivy-rich-mode 1))
#+end_src

*** Counsel

#+begin_src emacs-lisp
(use-package counsel
:bind (("M-x" . counsel-M-x)
        ("C-x b" . counsel-ibuffer)
        ("C-x C-f" . counsel-find-file)
        :map minibuffer-local-map
        ("C-r" . 'counsel-minibuffer-history)))
#+end_src

*** Company

#+begin_src emacs-lisp
(use-package company)
(add-hook 'after-init-hook 'global-company-mode)
#+end_src

*** Electric
**** Indentation

#+begin_src emacs-lisp
(add-hook 'after-init-hook 'electric-indent-mode)
#+end_src

**** parenthesis

#+begin_src emacs-lisp
(add-hook 'after-init-hook 'electric-pair-mode)
(setq electric-pair-preserve t)
(show-paren-mode 1)
(setq show-paren-delay 0)
#+end_src

** Dashboard
*** Configuration
#+begin_src emacs-lisp
(use-package dashboard
  :init      ;; tweak dashboard config before loading it
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
  ;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as bannerj
  (setq dashboard-startup-banner "~/.config/emacs/emacs.txt") ;; use standard emacs logo as bannerj
  (setq dashboard-center-content nil) ;; set to 't' for centered content
  (setq dashboard-items '((recents . 5)
                          (agenda . 5 )
                          (bookmarks . 3)
                          (projects . 3)
                          (registers . 3)))
  :config
  (dashboard-setup-startup-hook)
  (dashboard-modify-heading-icons '((recents . "file-text")
			      (bookmarks . "book"))))
#+end_src

#+RESULTS:
: t

*** Dashboard in Emacsclient

#+begin_src emacs-lisp
(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+end_src

** Helm

#+begin_src emacs-lisp
(use-package helm)
#+end_src

** Perspective

#+begin_src emacs-lisp
(use-package perspective
:bind
("C-x C-b" . persp-list-buffers)
:config
(persp-mode)
)
#+end_src

** Dired
instantly update dired
#+begin_src emacs-lisp
(add-hook 'dired-load-hook (function (lambda () (load "dired-x"))))
(add-hook 'dired-mode-hook 'auto-revert-mode)
(setq dired-mouse-drag-files 'link)
#+end_src

#+begin_src emacs-lisp
(use-package all-the-icons-dired
  :init (setq all-the-icons-dired-monochrome nil)
)

(use-package dired-open)
(use-package peep-dired)

(space-leader
    "d d" '(dired :which-key "Open dired")
    "d j" '(dired-jump :which-key "Dired jump to current")
    "d p" '(peep-dired :which-key "Peep-dired"))

(defun fix-peep-dired-next-file()
(interactive)
(delete-other-windows)
(peep-dired-next-file))

(defun fix-peep-dired-prev-file()
(interactive)
(delete-other-windows)
(peep-dired-prev-file))

(with-eval-after-load 'dired
(general-define-key
:states '(normal, visual)
:keymaps 'dired-mode-map
"h" 'dired-up-directory
"l" 'dired-find-file)

(general-define-key
:states '(normal, visual)
:keymaps 'peep-dired-mode-map
"j" 'fix-peep-dired-next-file
"k" 'fix-peep-dired-prev-file))

(add-hook 'peep-dired-hook 'evil-normalize-keymaps)
;; Get file icons in dired
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
;; With dired-open plugin, you can launch external programs for certain extensions
;; For example, I set all .png files to open in 'sxiv' and all .mp4 files to open in 'mpv'
(setq dired-open-extensions '(("gif" . "sxiv")
                              ("jpg" . "sxiv")
                              ("jpeg" . "sxiv")
                              ("png" . "sxiv")
                              ("svg" . "sxiv")
                              ("ttf" . "sxiv")
                              ("mkv" . "mpv")
                              ("pdf" . "zathura")
                              ("pptx" . "zathura")
                              ("ipynb" . "code")
                              ("r" . "rstudio")
                              ("rmd" . "rstudio")
                              ("mp4" . "mpv")))
#+end_src

#+begin_src emacs-lisp

(eval-after-load  "dired-x" '(defun dired-clean-up-after-deletion (fn)
  "My Clean up after a deleted file or directory FN.
Remove expanded subdir of deleted dir, if any."
  (save-excursion (and (cdr dired-subdir-alist)
                       (dired-goto-subdir fn)
                       (dired-kill-subdir)))

  ;; Offer to kill buffer of deleted file FN.
  (if dired-clean-up-buffers-too
      (progn
        (let ((buf (get-file-buffer fn)))
          (and buf
               (save-excursion ; you never know where kill-buffer leaves you
                 (kill-buffer buf))))
        (let ((buf-list (dired-buffers-for-dir (expand-file-name fn)))
              (buf nil))
          (and buf-list
               (while buf-list
                 (save-excursion (kill-buffer (car buf-list)))
                 (setq buf-list (cdr buf-list)))))))
  ;; Anything else?
  ))
#+end_src

#+begin_src emacs-lisp
(setq dired-listing-switches "-alh")
#+end_src

*** Dired group file and folder together
#+begin_src emacs-lisp
 (defun mydired-sort ()
  "Sort dired listings with directories first."
  (save-excursion
    (let (buffer-read-only)
      (forward-line 2) ;; beyond dir. header
      (sort-regexp-fields t "^.*$" "[ ]*." (point) (point-max)))
    (set-buffer-modified-p nil)))

(defadvice dired-readin
  (after dired-after-updating-hook first () activate)
  "Sort dired listings with directories first before adding marks."
  (mydired-sort))
#+end_src

** Flycheck

#+begin_src emacs-lisp
(use-package flycheck)
(use-package flycheck-haskell)
;; (global-flycheck-mode)
(setq flycheck-check-syntax-automatically '(mode-enabled save))
#+end_src

#+begin_src emacs-lisp
(use-package flycheck
  :config
  (setq-default flycheck-disabled-checkers '(python-pylint)))
#+end_src

** Rainbow mode

show rgb color in emacs
#+begin_src emacs-lisp
(use-package rainbow-mode)
#+end_src

** PDF
better pdf reader
#+begin_src emacs-lisp
(use-package pdf-tools
    :defer t
    :config
    (pdf-tools-install)
    (setq-default pdf-view-display-size 'fit-page)
)
#+end_src

** Projectile

#+begin_src emacs-lisp
(use-package projectile)
#+end_src

** All The Icons

#+begin_src emacs-lisp
(use-package all-the-icons)
#+end_src

** Emacs Everywhere

#+begin_src emacs-lisp
(use-package emacs-everywhere)
#+end_src

** Sudo Edit

#+begin_src emacs-lisp
(use-package sudo-edit)
#+end_src

** Anzu

#+begin_src emacs-lisp
(use-package evil-anzu)
(global-anzu-mode)
#+end_src

** Diff Highlight (git)

#+begin_src emacs-lisp
(use-package diff-hl)
(global-diff-hl-mode)
#+end_src

** Org Mode
*** Configuration

#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
(setq org-src-tab-acts-natively t
    org-return-follows-link t
    org-src-preserve-indentation nil
    org-edit-src-content-indentation 0
    org-src-fontify-natively t
    org-confirm-babel-evaluate nil)
(add-hook 'org-mode-hook 'visual-line-mode)
#+end_src

*** Org Bullets
Beautify your org bullets
#+begin_src emacs-lisp
(use-package org-bullets)
(add-hook 'org-mode-hook (lambda() (org-bullets-mode 1)))
#+end_src

collapsed all org bullets globally
#+begin_src emacs-lisp
(setq org-startup-folded t)
#+end_src

*** Org Todo keywords

#+begin_src emacs-lisp
  (setq org-todo-keywords        ; This overwrites the default Doom org-todo-keywords
          '((sequence
             "TODO(t)"           ; A task that is ready to be tackled
             "[ ](T)"           ; A checkbox
             "|"                 ; The pipe necessary to separate "active" states and "inactive" states
             "[X](D)"           ; A checkbox
             "DONE(d)"           ; Task has been completed
             "CANCELLED(c)" )))  ; Task has been cancelled
#+end_src

*** Org Todo toggle
Org toggle todo
#+begin_src emacs-lisp
(defun org-toggle-todo ()
  (interactive)
  (save-excursion
    (org-back-to-heading t) ;; Make sure command works even if point is
                            ;; below target heading
    (cond ((looking-at "\*+ TODO")
           (org-todo "DONE"))
          ((looking-at "\*+ DONE")
           (org-todo "TODO"))
          ((looking-at "\*+ \\[ \\]")
           (org-todo "[X]"))
          ((looking-at "\*+ \\[X\\]")
           (org-todo "[ ]"))
          (t (message "org toggle")))))

(define-key org-mode-map (kbd "C-c C-d") 'org-toggle-todo)
#+end_src
*** Org calenda
#+begin_src emacs-lisp
(define-key org-read-date-minibuffer-local-map (kbd "C-h") (lambda () (interactive) (org-eval-in-calendar '(calendar-backward-day 1))))
(define-key org-read-date-minibuffer-local-map (kbd "C-l") (lambda () (interactive) (org-eval-in-calendar '(calendar-forward-day 1))))
(define-key org-read-date-minibuffer-local-map (kbd "C-k") (lambda () (interactive) (org-eval-in-calendar '(calendar-backward-week 1))))
(define-key org-read-date-minibuffer-local-map (kbd "C-j") (lambda () (interactive) (org-eval-in-calendar '(calendar-forward-week 1))))
(define-key org-read-date-minibuffer-local-map (kbd "C-.") (lambda () (interactive) (org-eval-in-calendar '(calendar-forward-month 1))))
(define-key org-read-date-minibuffer-local-map (kbd "C-,") (lambda () (interactive) (org-eval-in-calendar '(calendar-backward-month 1))))
#+end_src

#+RESULTS:
: calendar-forward-day

*** Generate Table of Contents

#+begin_src emacs-lisp
(use-package org-make-toc)
(add-hook 'org-mode-hook #'org-make-toc-mode)
#+end_src

*** keybindings
#+begin_src emacs-lisp
(space-leader
       "m *"   '(org-ctrl-c-star :which-key "Org-ctrl-c-star")
       "m +"   '(org-ctrl-c-minus :which-key "Org-ctrl-c-minus")
       "m ."   '(counsel-org-goto :which-key "Counsel org goto")
       "m e"   '(org-export-dispatch :which-key "Org export dispatch")
       "m f"   '(org-footnote-new :which-key "Org footnote new")
       "m h"   '(org-toggle-heading :which-key "Org toggle heading")
       "m i"   '(org-toggle-item :which-key "Org toggle item")
       "m n"   '(org-store-link :which-key "Org store link")
       "m o"   '(org-set-property :which-key "Org set property")
       "m t"   '(org-todo :which-key "Org todo")
       "m x"   '(org-toggle-todo :which-key "Org toggle checkbox")
       "m B"   '(org-babel-tangle :which-key "Org babel tangle")
       "m I"   '(org-toggle-inline-images :which-key "Org toggle inline imager")
       "m T"   '(org-todo-list :which-key "Org todo list")
       "o a"   '(org-agenda :which-key "Org agenda")
       "m s"   '(org-schedule :which-key "Org schedule")
       "m s"   '(org-sort :which-key "Org sort")
       )
#+end_src

*** Latex Preview

#+begin_src emacs-lisp
(require 'org)
(setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
#+end_src

#+RESULTS:

*** Inline image

#+begin_src emacs-lisp
(setq org-startup-with-inline-images t)
#+end_src

*** Evil Mode
Enable evil keybindings for org mode
#+begin_src emacs-lisp
(use-package evil-org
  :ensure t
  :after org
  :config
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
(add-hook 'org-mode-hook 'evil-org-mode)

#+end_src

*** Org Make TOC
Automatically make table of content
#+begin_src emacs-lisp
(use-package toc-org
  :commands toc-org-enable
  :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Yasnippet
Template system for Emacs
#+begin_src emacs-lisp
(use-package yasnippet)
(yas-global-mode 1)
#+end_src

*** Indent
#+begin_src emacs-lisp
(setq yas-indent-line nil)

#+end_src

** Latex

#+begin_src emacs-lisp
(use-package auctex
:defer t)
(setq TeX-ignore-warnings
      "LaTeX Warning: Command \\\\mark\\(both\\|right\\)  has changed."
      TeX-suppress-ignored-warnings t)
#+end_src

** Emojis
Display Emoji in Emacs
#+begin_src emacs-lisp
(use-package emojify)
#+end_src

** Atomic Chrome
a package to edit text on a browser
#+begin_src emacs-lisp
(use-package atomic-chrome)
(atomic-chrome-start-server)
#+end_src

** Quickrun
Let you run code in current buffer quickly
#+begin_src emacs-lisp
(use-package quickrun)
(space-leader
       "x x"   '(quickrun :which-key "quickrun")
)
#+end_src

** Workspace
A workspace implementation from doom emacs
*** requirements
#+begin_src emacs-lisp
(use-package persp-mode
  :init
  (add-hook 'after-init-hook #'persp-mode)
  :config
  (setq persp-autokill-buffer-on-remove 'kill-weak
        persp-reset-windows-on-nil-window-conf nil
        persp-nil-hidden t
        persp-auto-save-fname "autosave"
        persp-save-dir (concat user-emacs-directory "workspaces/")
        persp-set-last-persp-for-new-frames t
        persp-switch-to-added-buffer nil
        persp-kill-foreign-buffer-behaviour 'kill
        persp-remove-buffers-from-nil-persp-behaviour nil
        persp-auto-resume-time  0; Don't auto-load on startup
        persp-auto-save-opt (if noninteractive 0 1)) ; auto-save on kill
)

(load
(expand-file-name
  "packages/workspaces.el"
  user-emacs-directory))


#+end_src

#+RESULTS:
: t

*** Keymap

#+begin_src emacs-lisp
(no-leader
"M-0"   '(+workspace/switch-to-9  :which-key "workspace 0")
"M-1"   '(+workspace/switch-to-0  :which-key "workspace 1")
"M-2"   '(+workspace/switch-to-1  :which-key "workspace 2")
"M-3"   '(+workspace/switch-to-2  :which-key "workspace 3")
"M-4"   '(+workspace/switch-to-3  :which-key "workspace 4")
"M-5"   '(+workspace/switch-to-4  :which-key "workspace 5")
"M-6"   '(+workspace/switch-to-5  :which-key "workspace 6")
"M-7"   '(+workspace/switch-to-6  :which-key "workspace 7")
"M-8"   '(+workspace/switch-to-7  :which-key "workspace 8")
"M-9"   '(+workspace/switch-to-8  :which-key "workspace 9")
"M-t"   '(+workspace/new          :which-key "workspace 9")
"M-n"   '(+workspace/new          :which-key "workspace 9")
"M-w"   '(+workspace/delete       :which-key "workspace 9")
"M-r"   '(+workspace/rename       :which-key "workspace 9")
"M-TAB" '(+workspace/display      :which-key "workspace 9")
"M-h"   '(+workspace/switch-left  :which-key "workspace 9")
"M-l"   '(+workspace/switch-right :which-key "workspace 9")
"M-H"   '(+workspace/swap-left    :which-key "workspace 9")
"M-L"   '(+workspace/swap-right   :which-key "workspace 9")
)
(space-leader
"TAB 0" '(+workspace/switch-to-9 :which-key "workspace 0")
"TAB 1" '(+workspace/switch-to-0 :which-key "workspace 1")
"TAB 2" '(+workspace/switch-to-1 :which-key "workspace 2")
"TAB 3" '(+workspace/switch-to-2 :which-key "workspace 3")
"TAB 4" '(+workspace/switch-to-3 :which-key "workspace 4")
"TAB 5" '(+workspace/switch-to-4 :which-key "workspace 5")
"TAB 6" '(+workspace/switch-to-5 :which-key "workspace 6")
"TAB 7" '(+workspace/switch-to-6 :which-key "workspace 7")
"TAB 8" '(+workspace/switch-to-7 :which-key "workspace 8")
"TAB 9" '(+workspace/switch-to-8 :which-key "workspace 9")
"TAB n" '(+workspace/new :which-key "new workspace")
"TAB w" '(+workspace/delete :which-key "delete workspace")
"TAB r" '(+workspace/rename :which-key "rename workspace")
"TAB TAB" '(+workspace/display :which-key "display workspaces")
"TAB h"   '(+workspace/switch-left  :which-key "workspace 9")
"TAB l"   '(+workspace/switch-right :which-key "workspace 9")
"TAB H"   '(+workspace/swap-left    :which-key "workspace 9")
"TAB L"   '(+workspace/swap-right   :which-key "workspace 9")
)

#+end_src

#+RESULTS:

** Language Support
*** Programming Languages

#+begin_src emacs-lisp
(use-package haskell-mode)
(use-package typescript-mode)
(use-package go-mode)
(use-package go-complete)
(use-package rust-mode)
(use-package yuck-mode)
#+end_src

*** html

#+begin_src emacs-lisp
(use-package ac-html)
(use-package ac-html-angular)
(use-package ac-html-csswatcher)
(use-package ac-html-bootstrap)
#+end_src

** LSP mode
Language server protocol turns emacs into an ide
*** Initialize lsp package
#+begin_src emacs-lisp
(use-package lsp-mode
:init
(setq lsp-keymap-prefix "C-l")
:config
(lsp-enable-which-key-integration t)
:commands
(lsp lsp-deferred)
)

(setq lsp-prefer-flymake nil) 
(setq lsp-enable-indentation nil)
(setq lsp-enable-on-type-formatting nil)
#+end_src

*** Setup lsp with other package
#+begin_src emacs-lisp
(use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
#+end_src

*** LSP features

#+begin_src emacs-lisp
(setq lsp-ui-doc-enable nil)
(setq lsp-ui-doc-show-with-cursor nil)
(setq lsp-ui-doc-show-with-mouse nil)
(setq lsp-ui-sideline-enable nil)
(setq lsp-signature-render-documentation nil)
(setq lsp-lens-enable nil)
#+end_src

*** Language support
**** Java

#+begin_src emacs-lisp
(use-package lsp-java)
(add-hook 'java-mode-hook 'lsp-deferred)
#+end_src

**** C/C++

#+begin_src emacs-lisp
(add-hook 'c++-mode-hook 'lsp-deferred)
(add-hook 'c-mode-hook 'lsp-deferred)
#+end_src

**** Python
#+begin_src emacs-lisp
(add-hook 'python-mode-hook 'lsp-deferred)
(setq lsp-pylsp-plugins-flake8-config (concat user-emacs-directory ".flake8"))
(setq lsp-pylsp-plugins-pydocstyle-enabled nil)
#+end_src

**** JSX/Javascript/Typescript

#+begin_src emacs-lisp
(add-hook 'javascript-mode-hook 'lsp-deferred)
(add-hook 'js-mode-hook 'lsp-deferred)
(add-hook 'typescript-mode-hook 'lsp-deferred)
(add-hook 'ts-mode-hook 'lsp-deferred)
(add-hook 'js-jsx-mode-hook 'lsp-deferred)
#+end_src

**** Latex
#+begin_src emacs-lisp
(use-package lsp-latex)
(use-package lsp-ltex)
(add-hook 'latex-mode-hook 'lsp-deferred)
#+end_src

**** Tailwindcss

#+begin_src emacs-lisp
(use-package lsp-tailwindcss
  :init
  (setq lsp-tailwindcss-add-on-mode t))
#+end_src

**** Rust

#+begin_src emacs-lisp
(add-hook 'rust-mode-hook 'lsp-deferred)
#+end_src

** DAP mode
DAP mode is a debugging package
*** Installation

#+begin_src emacs-lisp
(use-package dap-mode)
(setq dap-auto-configure-features '(sessions locals controls tooltip))
(no-leader
"<f5>" '(dap-debug :which-key "debug mode"))
(dap-leader
"d" '(dap-debug :which-key "debug-mode")
"b a" '(dap-breakpoint-add :which-key "add breakpoint")
"b d" '(dap-breakpoint-delete :which-key "delete breakpoint")
"h" '(dap-hydra :which-key "dap hydra")
)
#+end_src

#+RESULTS:

*** hooks

#+begin_src emacs-lisp
(add-hook 'dap-stopped-hook
    (lambda (arg) (call-interactively #'dap-hydra)))
#+end_src

*** Languages

#+begin_src emacs-lisp
;; java
(require 'dap-java)
;; python
(require 'dap-python)
;; c/c++
(require 'dap-gdb-lldb)
(require 'dap-lldb)
(require 'dap-cpptools)
;; remeber to run dap-gdb-lldb-setup
;; remeber to run dap-cpptools-setup
#+end_src

** Tramp mode
*** Set default connection method
#+begin_src emacs-lisp
(setq tramp-default-method "ssh")
#+end_src
*** Shell prompt fix
#+begin_src emacs-lisp
(setq shell-prompt-pattern '"^[^#$%>\n]*~?[#$%>] *")
#+end_src

#+RESULTS:
: ^[^#$%>
: ]*~?[#$%>] *

*** Set

** Docker mode
#+begin_src emacs-lisp
(use-package docker)
(load
(expand-file-name
"packages/dockerfile-mode.el"
user-emacs-directory))
(use-package docker-compose-mode)
#+end_src

*** Fix Indentation

#+begin_src emacs-lisp
  (add-hook 'dockerfile-mode-hook
        (lambda ()
            (setq-local indent-line-function #'sh-indent-line)))
#+end_src

#+RESULTS:
| lambda | nil | (setq-local indent-line-function #'sh-indent-line)                 |
| lambda | nil | (set (make-local-variable 'indent-line-function) #'sh-indent-line) |

** Files
*** Keybindings

#+begin_src emacs-lisp
(space-leader
    "."     '(find-file :which-key "Find file")
    ">"     '(counsel-fzf :which-key "Find file recursively")
    "f f"   '(find-file :which-key "Find file")
    "f r"   '(counsel-fzf :which-key "Find file recursively")
    "f r"   '(counsel-recentf :which-key "Recent files")
    "f s"   '(save-buffer :which-key "Save file")
    "f u"   '(sudo-edit-find-file :which-key "Sudo find file")
    "f y"   '(dt/show-and-copy-buffer-path :which-key "Yank file path")
    "f C"   '(copy-file :which-key "Copy file")
    "f D"   '(delete-file :which-key "Delete file")
    "f R"   '(rename-file :which-key "Rename file")
    "f S"   '(write-file :which-key "Save file as...")
    "f U"   '(sudo-edit :which-key "Sudo edit file"))
#+end_src

*** File Shortcut

#+begin_src emacs-lisp
(space-leader
  "- a" '(lambda () (interactive)(find-file "~/orgfiles/applied.org") :which-key "Emacs Configuration")
  "- e" '(lambda () (interactive)(find-file "~/.config/emacs/README.org") :which-key "Emacs Configuration")
  "- p" '(lambda () (interactive)(find-file "~/Documents/Projects") :which-key "Project Folder")
  "- c" '(lambda () (interactive)(find-file "~/Documents/Class/2024/spring/") :which-key "Class Folder")
  "- k" '(open-calendar :which-key "calendar buffer")
)
#+end_src

#+RESULTS:

** Python Notebook
#+begin_src emacs-lisp
(use-package ein)
#+end_src

** Highlight Indent
#+begin_src emacs-lisp
;; (use-package highlight-indent-guides)
;; (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
;; (setq highlight-indent-guides-method 'character)
;; (setq highlight-indent-guides-responsive 'nil)
;; (setq highlight-indent-guides-auto-enabled nil)

;; (set-face-foreground 'highlight-indent-guides-character-face "dimgray")
;; (set-face-foreground 'highlight-indent-guides-stack-character-face "gainsboro")
;; (set-face-foreground 'highlight-indent-guides-top-character-face "white")

;; (setq highlight-indent-guides-auto-character-face-perc 50)
;; (setq highlight-indent-guides-auto-stack-character-face-perc 80)
;; (setq highlight-indent-guides-auto-top-character-face-perc 100)
#+end_src

#+RESULTS:
| highlight-indent-guides-mode | rainbow-delimiters-mode | disable-tabs |

** Indent bar

#+begin_src emacs-lisp
(use-package indent-bars
  :straight (:host github :repo "jdtsmith/indent-bars" :files ("dist" "*.el"))
  :hook ((prog-mode) . indent-bars-mode)) ; or whichever modes you prefer
(setq indent-bars-width-frac .2
indent-bars-pad-frac .2
indent-bars-pattern "." 
indent-bars-display-on-blank-lines t
indent-bars-starting-column 0
indent-bars-color '(highlight :face-bg t :blend 0.8)
indent-bars-prefer-character "|"
)
#+end_src

** Dumb Jump

#+begin_src emacs-lisp
(use-package dumb-jump)
(add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
(setq xref-show-definitions-function #'xref-show-definitions-completing-read)
#+end_src

** Git Dired Modeline

#+begin_src emacs-lisp
(use-package git-ps1-mode)
(git-ps1-mode)
#+end_src

** Write room mode
#+begin_src emacs-lisp
;; (use-package writeroom-mode)
;; (setq writeroom-width 0.7)
;; (setq writeroom-mode-line t)
;; (no-leader
;; "s-," '(writeroom-decrease-width :which-key "decrease border width")
;; "s-." '(writeroom-increase-width :which-key "increase border width")
;; "s-/" '(writeroom-adjust-width   :which-key "adjust border width"))

;; (add-hook 'org-mode-hook 'writeroom-mode)
#+end_src

** Magit

#+begin_src emacs-lisp
(use-package magit)
(space-leader
       "g g"   '(magit-status :which-key "Open Magit")
)
#+end_src

** Math Preview

#+begin_src emacs-lisp
(use-package math-preview)
#+end_src

** copilot

#+begin_src emacs-lisp
(use-package copilot
  :straight (:host github :repo "zerolfx/copilot.el" :files ("dist" "*.el"))
  :ensure t)
;; (add-hook 'prog-mode-hook 'copilot-mode)
(defun my/copilot-tab ()
  (interactive)
  (or (copilot-accept-completion)
      (indent-for-tab-command)))
(with-eval-after-load 'copilot
  (evil-define-key 'insert copilot-mode-map
    (kbd "<tab>") #'my/copilot-tab))

#+end_src

** Evil easymotion

#+begin_src emacs-lisp
(use-package evil-easymotion
  :straight (:host github :repo "PythonNut/evil-easymotion" :files ("dist" "*.el"))
  :ensure t)
(space-leader
    "t c" '(copilot-mode :which-key "toggle-copilot")
    "t f" '(flycheck-disable-checker :which-key "toggle-flycheck")
)

(evilem-default-keybindings "SPC")
#+end_src

** Treesit
run `treesit-auto-install-all`. Currently the implementation is not too good.

#+begin_src emacs-lisp
;; (use-package treesit-auto
;;   :demand t
;;   :config
;;   (global-treesit-auto-mode))
#+end_src

** Treesitter

#+begin_src emacs-lisp
(use-package tree-sitter)
(use-package tree-sitter-langs)
(global-tree-sitter-mode)
(add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
#+end_src

** Markdown drag and drop

#+begin_src emacs-lisp
(use-package docker)
(load
(expand-file-name
"packages/markdown-dnd-images.el"
user-emacs-directory))
(setq dnd-save-directory "images")
(setq dnd-view-inline t)
(setq dnd-capture-source nil)
#+end_src

** Counsel rg-here

#+begin_src emacs-lisp
(defun hn-counsel-rg-here ()
(interactive)
(counsel-rg nil default-directory)
)
#+end_src

* Configuration
** remove file lock

#+begin_src emacs-lisp
(setq create-lockfiles nil)
#+end_src

** Evil Shift keep selection

#+begin_src emacs-lisp
; Overload shifts so that they don't lose the selection
(define-key evil-visual-state-map (kbd ">") 'hn623t/evil-shift-right-visual)
(define-key evil-visual-state-map (kbd "<") 'hn623t/evil-shift-left-visual)
(define-key evil-visual-state-map [tab] 'hn623t/evil-shift-right-visual)
(define-key evil-visual-state-map [S-tab] 'hn623t/evil-shift-left-visual)

(defun hn623t/evil-shift-left-visual ()
  (interactive)
  (evil-shift-left (region-beginning) (region-end))
  (evil-normal-state)
  (evil-visual-restore))

(defun hn623t/evil-shift-right-visual ()
  (interactive)
  (evil-shift-right (region-beginning) (region-end))
  (evil-normal-state)
  (evil-visual-restore))
#+end_src

** instantly update file as it changes

#+begin_src emacs-lisp
(global-auto-revert-mode t)
#+end_src

** Keep folders clean
*** Backup files
#+begin_src emacs-lisp
(setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory))))
#+end_src

*** Auto Save files
#+begin_src emacs-lisp
(make-directory (expand-file-name "tmp/auto-saves/" user-emacs-directory) t)
(setq auto-save-list-file-prefix (expand-file-name "tmp/auto-saves/sessions/" user-emacs-directory)
auto-save-file-name-transforms `((".*" ,(expand-file-name "tmp/auto-saves" user-emacs-directory) t)))
#+end_src

*** No littering
#+begin_src emacs-lisp
(use-package no-littering)
#+end_src

** Windows control
*** Split buffer side by side

#+begin_src emacs-lisp
(setq split-height-threshold nil)
(setq split-width-threshold 0)
#+end_src

*** Keybindings
#+begin_src emacs-lisp
(winner-mode 1)
(space-leader
       ;; Window splits
       "w c"   '(evil-window-delete :which-key "Close window")
       "w d"   '(evil-window-delete :which-key "Close window")
       "w o"   '(delete-other-windows :which-key "Delete other windows")
       "w n"   '(evil-window-new :which-key "New window")
       "w s"   '(evil-window-split :which-key "Horizontal split window")
       "w v"   '(evil-window-vsplit :which-key "Vertical split window")
       "w _"   '(evil-window-set-height :which-key "evil-window-set-height")
       "w |"   '(evil-window-set-width :which-key "evil-window-set-width")

       ;; Window motions
       "w h"   '(evil-window-left :which-key "Window left")
       "w j"   '(evil-window-down :which-key "Window down")
       "w k"   '(evil-window-up :which-key "Window up")
       "w l"   '(evil-window-right :which-key "Window right")
       "w w"   '(evil-window-next :which-key "Goto next window")
       ;; winner mode
       "w <left>"  '(winner-undo :which-key "Winner undo")
       "w <right>" '(winner-redo :which-key "Winner redo"))
#+end_src

#+RESULTS:

** Registers

#+begin_src emacs-lisp
(space-leader
       "r c"   '(copy-to-register :which-key "Copy to register")
       "r f"   '(frameset-to-register :which-key "Frameset to register")
       "r i"   '(insert-register :which-key "Insert register")
       "r j"   '(jump-to-register :which-key "Jump to register")
       "r l"   '(list-registers :which-key "List registers")
       "r n"   '(number-to-register :which-key "Number to register")
       "r r"   '(counsel-register :which-key "Choose a register")
       "r v"   '(view-register :which-key "View a register")
       "r w"   '(window-configuration-to-register :which-key "Window configuration to register")
       "r +"   '(increment-register :which-key "Increment register")
       "r SPC" '(point-to-register :which-key "Point to register"))
#+end_src

** text scaling
#+begin_src emacs-lisp
(no-leader-global
"C-=" '(text-scale-increase :which-key "increase text size")
"C--" '(text-scale-decrease :which-key "decrease text size"))
#+end_src

** Cursor

#+begin_src emacs-lisp
(setq visible-cursor nil)
#+end_src

** general Keybindings

#+begin_src emacs-lisp
(space-leader
  "SPC"   '(counsel-M-x :which-key "M-x")
  "c c"   '(compile :which-key "Compile")
  "c C"   '(recompile :which-key "Recompile")
  "h r r" '((lambda () (interactive) (load-file (concat user-emacs-directory "init.el"))) :which-key "Reload emacs config")
  "h t t" '(load-theme :which-key "Reload emacs config")
  "t t"   '(visual-line-mode :which-key "toggle visual line mode")
)
(no-leader
  "M-/"   '(hn-counsel-rg-here :which-key "counsel ripgrep current directory")
  "M-?"   '(counsel-rg :which-key "counsel ripgrep")
)
#+end_src

** Copy directory to keyring

#+begin_src emacs-lisp
(defun my/dired-copy-dirname-as-kill ()
  "Copy the current directory into the kill ring."
  (interactive)
  (kill-new default-directory))
(space-leader
"y y" 'my/dired-copy-dirname-as-kill)
#+end_src

* Runtime Optimization
** lower GC Threshold gc happens more frquqently in less time
#+begin_src emacs-lisp
(setq gc-cons-threshold (* 2 1000 1000))
#+end_src

* Silence warning due to emacs 29.0.5
#+begin_src emacs-lisp
(setq warning-minimum-level :emergency)
#+end_src
